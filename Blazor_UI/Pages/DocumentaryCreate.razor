@page "/Documentary/Create"
@using Blazor_UI.Data
@inject IHttpClientFactory ClientFactory
@inject DocumentaryApiRequests documentaryapi
@inject HttpClient http;
@inject IJSRuntime JSRuntime;

<main class="main">
    <div class="page-content">
        <section class="mt-4 pt-10 pb-8">
            <div class="container">
                <div class="tab-pane" id="account">
                    <EditForm Model="@documentaryCreateDto" OnSubmit="@HandleSubmit" enctype="multipart/form-data" class="form">
                        <div asp-validation-summary="ModelOnly" class="text-color"></div>
                        <label>Başlık</label>
                        <InputText type="text" class="form-control mb-0" @bind-Value="documentaryCreateDto.Title"/>
                        <span asp-validation-for="Title"></span>

                        <label>Video Seçiniz</label>
                        <InputFile class="form-control" OnChange="OnInputFileChange" @bind-Value="documentaryCreateDto.FileDoc"/>
                        <span asp-validation-for="FileDoc"></span>

                        <div>
                        <label>Durum</label>
                        <InputCheckbox id="switch" @bind-Value="documentaryCreateDto.Status" />
                        <label class="togglechck" for="switch">Toggle</label>
                        <span asp-validation-for="Status"></span>
                        </div>
                        <br />
                        <button type="submit" class="btn btn-primary">Kaydet</button>
                        <a href="/Documentary" class="btn btn-secondary">Tüm Belgeseller</a>
                    </EditForm>
                </div>
            </div>
        </section>
    </div>
</main>

@code {
    private DocumentaryCreateDtoBlazor documentaryCreateDto = new DocumentaryCreateDtoBlazor();

    private async void HandleSubmit()
    {
        if (documentaryCreateDto.FileDoc is not null)
        {

            string path = Path.Combine("D:\\bitirmeTezi\\UI\\wwwroot", "videos\\upload");
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }

            string fileName = Path.GetFileName(documentaryCreateDto.FileDoc.Name);
            string[] filenamedot = fileName.Split('.');
            string fileename = filenamedot[0];
            fileename = DateTime.Now.ToString("dd-MM-yyyy-HH-mm") + "-" + fileename + "." + filenamedot[filenamedot.Length - 1].ToString();
            using (FileStream stream = new(Path.Combine(path, fileename), FileMode.Create))
            {
                await documentaryCreateDto.FileDoc.OpenReadStream(maxAllowedSize:102400000).CopyToAsync(stream);
            }
            //string host = _httpContextAccessor.HttpContext.Request.Host.Value;
            //string FileNameFinal = Path.Combine(this._hostEnvironment.WebRootPath, "img", fileename);
            string fileNameFinal = "videos/upload/" + fileename;
            documentaryCreateDto.VideoPath = fileNameFinal;
        }
        else
        {
            documentaryCreateDto.VideoPath = "img/team/profile-picture-1.jpg";
        }

        documentaryapi.CreateAsync(documentaryCreateDto).Wait();

    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        documentaryCreateDto.FileDoc = e.File;

        this.StateHasChanged();
    }
}
